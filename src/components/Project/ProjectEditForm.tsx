import { Formik, Form, Field, FieldArray } from 'formik';
import type { Project } from '@/models/Project';
import type { Task } from '@/models/Project';
import type { Lead } from '@/models/Project';
import { useMemo } from 'react';
// —Ö—É–∫ React, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏, 
// –µ—Å–ª–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏.
//  –ü—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ProjectEditForm –º—ã —Å–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç initialValues.
// –ë–µ–∑ useMemo –æ–Ω –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ project –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è.
//  –ê —ç—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, Formik —Å–±—Ä–æ—Å–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã) –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∫ –ª–∏—à–Ω–∏–º –≤—ã—á–∏—Å–ª–µ–Ω–∏—è–º.
//  –§—É–Ω–∫—Ü–∏—è –≤–Ω—É—Ç—Ä–∏ useMemo –æ–¥–∏–Ω —Ä–∞–∑ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥–Ω–æ–π project:
//  –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç tasks –∏ leads –≤ –º–∞—Å—Å–∏–≤—ã –æ–±—ä–µ–∫—Ç–æ–≤ —Å id –∏ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º (title –∏ value)
//  –ï—Å–ª–∏ task –∏–ª–∏ lead –Ω–µ –∏–º–µ–ª–∏ id, –º—ã —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ generateId()
//  [project] ‚Äî —ç—Ç–æ –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –ï—Å–ª–∏ project –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è, React –Ω–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Å–æ–∑–¥–∞–≤–∞—Ç—å initialValues.
// Formik –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç initialValues, –∏ –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–æ—Ä–º—É.
//  useMemo –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–µ —Å–±—Ä–æ—Å—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ä–µ–∫—Ç –æ—Å—Ç–∞—ë—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º –º–µ–∂–¥—É —Ä–µ–Ω–¥–µ—Ä–∞–º–∏, –ø–æ–∫–∞ project –Ω–µ –ø–æ–º–µ–Ω—è–µ—Ç—Å—è.



const generateId = () => Math.random().toString(36).substring(2, 15);

interface Props {
  project: Project;
  onSubmit: (values: Project) => void;
}

export default function ProjectEditForm({ project, onSubmit }: Props) {
  //  –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏: –æ–Ω –ø—Ä–æ—Å—Ç–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∏—Ö –∏ –≤—ã–∑—ã–≤–∞–µ—Ç onSubmit.

    const initialValues= useMemo(() => ({
    ...project,
    tasks: (project.tasks ?? []).map((task) =>
//  –æ–ø–µ—Ä–∞—Ç–æ—Ä –Ω—É–ª–µ–≤–æ–≥–æ —Å–ª–∏—è–Ω–∏—è (??) –¥–∞—ë—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∑–∞–º–µ–Ω—É- –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ []
      typeof task === 'string'
        ? { id: generateId(), title: task }
        : { id: task.id ?? generateId(), title: task.title }
    ),
    leads: (project.leads ?? []).map((lead) =>
      typeof lead === 'string'
        ? { id: generateId(), value: lead }
        : { id: lead.id ?? generateId(), value: lead.value }
    ),
  }), [project]);

  return (
    <Formik initialValues={initialValues} onSubmit={onSubmit} >
      {({ values }) => (
        <Form>
          <Field name="name" placeholder="Project Name" /> 
          {/* - Field ‚Äî —ç—Ç–æ –∫–∞–∫ input, –Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è Formik. */}
          <Field name="shortDescription" as="textarea" placeholder="Short Description" />
          <Field name="detailedDescription" as="textarea" placeholder="Detailed Description" />
          <Field name="startDate" type="date" />
          <Field name="endDate" type="date" />
          <Field name="budget" placeholder="Budget" />
          <Field name="risks" as="textarea" placeholder="Risks" />
          <Field name="communicationPlan" as="textarea" placeholder="Communication Plan" />
          <Field name="evaluationCriteria" as="textarea" placeholder="Evaluation Criteria" />

          <h4>Tasks</h4>
          <FieldArray name="tasks">
            {({ push, remove }) => (
              <div>
                {values.tasks.map((task, index) => (
                  <div key={task.id}                  >
                    <Field name={`tasks.${index}.title`} placeholder={`Task ${index + 1}`} />
                    <Field name={`tasks.${index}.id`} type="hidden" />
                    <button type="button" onClick={() => remove(index)}>‚ùå</button>
                  </div>
                ))}
                <button type="button" onClick={() => push({id:generateId(), title: '' })}>
                  ‚ûï Add Task
                </button>
              </div>
            )}
          </FieldArray>

          <h4>Leads</h4>
          <FieldArray name="leads">
            {/* FieldArray –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Å—Å–∏–≤–æ–º –ø–æ–ª–µ–π, —É–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤–æ–º –∑–Ω–∞—á–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–µ, values.leads –±—É–¥–µ—Ç –º–∞—Å—Å–∏–≤.
 This is Component*/}
           {({ push, remove }) => (
              <div>
                {values.leads.map((lead, index) => (
                  <div key={lead.id}>
                    <Field name={`leads.${index}.value`} placeholder={`Lead ${index + 1}`} />
                    <Field name={`leads.${index}.id`} type="hidden" />
                    <button type="button" onClick={() => remove(index)}>‚ùå</button>
                  </div>
                ))}
                <button type="button" onClick={() => push({id: generateId(), value:''})}>‚ûï Add Lead</button>
              </div>
            )}
          </FieldArray>

          <br />
          <button type="submit">üíæ Save</button>
        </Form>
      )}
    </Formik>
  );
}




























